<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>生产环境Redis的安装</title>
      <link href="/2018/04/06/Redis/"/>
      <url>/2018/04/06/Redis/</url>
      <content type="html"><![CDATA[<p>安装单机版redis<br>redis的生产环境启动方案<br>redis cli的使用</p><p>1、安装单机版redis</p><p>大家可以自己去官网下载，当然也可以用课程提供的压缩包</p><p>wget <a href="http://downloads.sourceforge.net/tcl/tcl8.6.1-src.tar.gz" target="_blank" rel="noopener">http://downloads.sourceforge.net/tcl/tcl8.6.1-src.tar.gz</a><br>tar -xzvf tcl8.6.1-src.tar.gz<br>cd  /usr/local/tcl8.6.1/unix/<br>./configure<br>make &amp;&amp; make install</p><p>使用redis-3.2.8.tar.gz（截止2017年4月的最新稳定版）/usr/local/redis-3.2.8<br>tar -zxvf redis-3.2.8.tar.gzcd ..<br>cd redis-3.2.8<br>make &amp;&amp; make test &amp;&amp; make install</p><p>2、redis的生产环境启动方案</p><p>redis作为一个系统的daemon进程去运行的，每次系统启动，redis进程一起启动<br>（1）redis utils目录下，有个redis_init_script脚本<br>（2）将redis_init_script脚本拷贝到linux的/etc/init.d目录中，将redis_init_script重命名为redis_6379，6379是我们希望这个redis实例监听的端口号<br>（3）修改redis_6379脚本的第6行的REDISPORT，设置为相同的端口号（默认就是6379）<br>（4）创建两个目录：/etc/redis（存放redis的配置文件），/var/redis/6379（存放redis的持久化文件）<br>（5）修改redis配置文件（默认在redis的根目录下（/usr/local/redis-3.2.8），redis.conf），拷贝到/etc/redis目录中，修改名称为6379.conf<br>（6）修改redis.conf中的部分配置为生产环境</p><p>daemonize    yes                            让redis以daemon进程运行<br>pidfile        /var/run/redis_6379.pid     设置redis的pid文件位置   <strong>该文件一旦redis启动成功之后，该目录下面就会生成pid文件</strong><br>port        6379                        设置redis的监听端口号<br>dir         /var/redis/6379                设置持久化文件的存储位置.  </p><p>（7）启动redis，执行cd /etc/init.d, chmod 777 redis_6379，./redis_6379 start</p><pre><code>如果运行./redis_6379 start ，发生如下错误./redis_6379: /bin/sh^M: bad interpreter，原因：   如果这个脚本在Windows下编辑过，就有可能被转换成Windows下的dos文本格式了，这样的格式每一行的末尾都是以\r\n来标识，它的ASCII码分别是0x0D，0x0A。如果你将 这个脚本文件直接放到Linux上执行就会报/bin/bash^M: bad interpreter错误提示。解决方法：首先你先要检查一下看看你的脚本文件是不是这个问题导致的，用vi命令打开要检查的脚本文件，然后用   :set ff?命令检查一下，看看是不是dos字样，如果是dos格式的，继续执行   :set ff=unix   然后执行   :qw   保存退出即可。</code></pre><p>（8）确认redis进程是否启动，ps -ef | grep redis</p><p>（9）让redis跟随系统启动自动启动</p><p> 在redis_6379脚本中，最上面，加入两行注释</p><p> chkconfig:   2345 90 10</p><p> description:  Redis is a persistent key-value database</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/sh</span><br><span class="line">#</span><br><span class="line"># Simple Redis init.d script conceived to work on Linux systems</span><br><span class="line"># as it does use of the /proc filesystem.</span><br><span class="line"></span><br><span class="line"># chkconfig:   2345 90 10</span><br><span class="line"></span><br><span class="line"># description:  Redis is a persistent key-value database</span><br><span class="line"></span><br><span class="line">REDISPORT=6379</span><br><span class="line">EXEC=/usr/local/bin/redis-server</span><br><span class="line">CLIEXEC=/usr/local/bin/redis-cli</span><br><span class="line"></span><br><span class="line">PIDFILE=/var/run/redis_$&#123;REDISPORT&#125;.pid</span><br><span class="line">CONF=&quot;/etc/redis/$&#123;REDISPORT&#125;.conf&quot;</span><br></pre></td></tr></table></figure><p> chkconfig redis_6379 on</p><p>3、redis cli的使用</p><p>redis-cli SHUTDOWN，连接本机的6379端口停止redis进程</p><p>redis-cli -h 127.0.0.1 -p 6379 SHUTDOWN，制定要连接的ip和端口号</p><p>redis-cli PING，ping redis的端口，看是否正常</p><p>redis-cli，进入交互式命令行</p><p>SET k1 v1<br>GET k1</p><p>redis的技术，包括4块</p><p>redis各种数据结构和命令的使用，包括java api的使用<br>redis一些特殊的解决方案的使用，pub/sub消息系统，分布式锁，输入的自动完成，等等<br>redis日常的管理相关的命令<br>redis企业级的集群部署和架构</p>]]></content>
      
      
        <tags>
            
            <tag> eshop </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>环境配置</title>
      <link href="/2018/04/05/Environment/"/>
      <url>/2018/04/05/Environment/</url>
      <content type="html"><![CDATA[<p>1.配置yum</p><p>yum clean all<br>yum makecache<br>yum install wget</p><p>2.安装JDK</p><p>(1) 将jdk-7u60-linux-i586.rpm通过WinSCP上传到虚拟机中<br>(2) 安装JDK：rpm -ivh jdk-7u65-linux-i586.rpm<br>(3) 配置jdk相关的环境变量<br>vi .bashrc<br>export JAVA_HOME=/usr/java/latest<br>export PATH=$PATH:$JAVA_HOME/bin<br>source .bashrc<br>(4) 测试jdk安装是否成功：java -version</p><p>3.安装Perl<br>yum install -y gcc</p><p>wget <a href="http://www.cpan.org/src/5.0/perl-5.16.1.tar.gz" target="_blank" rel="noopener">http://www.cpan.org/src/5.0/perl-5.16.1.tar.gz</a><br>tar -xzf perl-5.16.1.tar.gz<br>cd perl-5.16.1<br>./Configure -des -Dprefix=/usr/local/perl<br>make &amp;&amp; make test &amp;&amp; make install<br>perl -v</p><p>4.在4个虚拟机中安装CentOS集群</p><p>（1）按照上述步骤，再安装三台一模一样环境的linux机器<br>（2）另外三台机器的hostname分别设置为eshop-cache02，eshop-cache03，eshop-cache04<br>（3）安装好之后，在每台机器的hosts文件里面，配置好所有的机器的ip地址到hostname的映射关系</p><p>比如说，在eshop-cache01的hosts里面</p><p>192.168.0.150 eshop-cache01<br>192.168.0.152 eshop-cache03<br>192.168.0.151 eshop-cache02<br>192.168.0.153 eshop-cache04</p><p>5.配置4台CentOS为ssh免密码互相通信</p><p>（1）首先在三台机器上配置对本机的ssh免密码登录<br>ssh-keygen -t rsa<br>生成本机的公钥，过程中不断敲回车即可，ssh-keygen命令默认会将公钥放在/root/.ssh目录下<br>cd /root/.ssh<br>cp id_rsa.pub authorized_keys<br>将公钥复制为authorized_keys文件，此时使用ssh连接本机就不需要输入密码了</p><p>测试：ssh eshop-cache01,ssh eshop-cache03,ssh  eshop-cache02,ssh eshop-cache04</p><p>成功</p><p>（2）接着配置三台机器互相之间的ssh免密码登录<br>使用ssh-copy-id -i hostname命令将本机的公钥拷贝到指定机器的authorized_keys文件中</p><p>Example</p><p>eshop-cache01 机器</p><p>ssh-copy-id -i eshop-cache02<br>ssh-copy-id -i eshop-cache03<br>ssh-copy-id -i eshop-cache04</p><p>eshop-cache02 机器</p><p>ssh-copy-id -i eshop-cache01<br>ssh-copy-id -i eshop-cache03<br>ssh-copy-id -i eshop-cache04</p><p>eshop-cache03 机器</p><p>ssh-copy-id -i eshop-cache01<br>ssh-copy-id -i eshop-cache02<br>ssh-copy-id -i eshop-cache04</p><p>eshop-cache04 机器</p><p>ssh-copy-id -i eshop-cache01<br>ssh-copy-id -i eshop-cache02<br>ssh-copy-id -i eshop-cache03</p><p>测试：</p><p>eshop-cache04 机器</p><p>ssh eshop-cache01 ，免密码直接登录</p><p>以上的步骤，还有一些简单的办法。借助SCP 远程拷贝命令</p><p>例如：</p><p>SCP authorized_keys eshop-cache02:/root/.ssh<br>SCP authorized_keys eshop-cache03:/root/.ssh<br>SCP authorized_keys eshop-cache04:/root/.ssh</p>]]></content>
      
      
        <tags>
            
            <tag> eshop </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Ssh 服务器安装</title>
      <link href="/2018/04/05/Ssh/"/>
      <url>/2018/04/05/Ssh/</url>
      <content type="html"><![CDATA[<p>1.查看SSH是否安装（检查是否装了SSH包）。</p><p>输入命令：rpm -qa | grep ssh</p><p>2.安装SSH 服务</p><p>yum install openssh-server</p><p>3.查看SSH服务是否正在运行。<br>输入命令：/etc/init.d/sshd status</p><p>4.service sshd start）命令开启SSH服务；停止SSH服务命令（service sshd stop）</p><p>重启SSH服务命令（service sshd restart）</p><p>5.查看启动22端口</p><p>netstat -antp | grep sshd 查看是否启动22端口]</p><p>6.检查SSHD是否在本运行级别下设置为开机启动<br>输入命令：chkconfig –list sshd</p><p>7.设置SSH服务为开机启动。<br>输入命令：chkconfig sshd on 即可。<br>注：若是chkconfig sshd off则禁止SSH开机启动。</p>]]></content>
      
      
        <tags>
            
            <tag> eshop </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>ftp 服务器安装</title>
      <link href="/2018/04/05/ftp/"/>
      <url>/2018/04/05/ftp/</url>
      <content type="html"><![CDATA[<p>1、用root 进入系统</p><p>2、使用命令 rpm  -qa|grep vsftpd 查看系统是否安装了ftp，若安装了vsftp，使用这个命令会在屏幕上显示vsftpd的版本 </p><p>3、使用命令rpm -e vsftpd 即可卸载ftp</p><p>4、再使用rpm  -qa|grep vsftpd 查看系统是否已删除ftp，若删除成功，屏幕上显示vsftpd的版本</p><p>一：安装vsftpd</p><p>查看是否已经安装vsftpd<br>[root@localhost ~]# rpm -qa | grep vsftpd</p><p>如果没有，就安装，并设置开机启动<br>[root@localhost ~]# yum -y install vsftpd<br>[root@localhost ~]# chkconfig vsftpd on</p><p>ftp服务的相关命令（其实所有的服务都是这三个命令）：<br>启动:  service vsftpd start</p><p>停止:  service vsftpd stop</p><p>重启:  service vsftpd restart</p><p>二、部署ftp服务器</p><p>上面只是下载安装了ftp服务，下面是需要配置一下，才能正常使用。</p><p>1、修改ftp服务器的配置文件，文件的默认位置是/etc/vsftpd/vsftpd.conf</p><p>[root@localhost ~]# vi /etc/vsftpd/vsftpd.conf</p><p>找到下面的三段，这三段是在一起的哦</p><p>//chroot_list_enable=YES<br>// (default follows)<br>//chroot_list_file=/etc/vsftpd.chroot_list</p><p>然后将上下两行的#号去掉，变成</p><p>chroot_list_enable=YES<br>// (default follows)<br>chroot_list_file=/etc/vsftpd.chroot_list</p><p>useradd -d /ftp -g ftp -s /sbin/nologin ftpserver</p><p>passwd ftpserver</p><p>三、配置防火墙</p><p>打开防火墙的配置文件，路径为/etc/sysconfig/iptables</p><p>[root@localhost ~]# vi /etc/sysconfig/iptables</p><p>然后在中间增加下面一行代码</p><p>-A INPUT -m state –state NEW -m tcp -p tcp –dport 21 -j ACCEPT</p><p>保存和关闭文件，然后重启防火墙<br>[root@localhost ~]# service iptables restart</p><p>[root@localhost ~]# getsebool -a |grep ftp</p><p>这是selinux的问题，我们只要打开ftp_home_dir的值开启为on：，allow_ftpd_full_access也一同开启即可。</p><p>[root@localhost ~]# setsebool -P ftp_home_dir 1<br>[root@localhost ~]# setsebool -P allow_ftpd_full_access 1<br>到此，应该解决问题了。</p><p>四：关闭防火墙</p><p>service iptables stop<br>service ip6tables stop<br>chkconfig iptables off<br>chkconfig ip6tables off</p><p>关闭SELinux：</p><p>1、修改配置文件需要重启机器：</p><p>修改/etc/selinux/config 文件</p><p>将SELINUX=enforcing改为SELINUX=disabled</p><p>重启机器即可</p><p>四：如果500 OOPS: could not read chroot() list file:/etc/vsftpd/chroot_list ， 请在相应的目录创建空白的chroot_list</p><p>vi chroot_list</p>]]></content>
      
      
        <tags>
            
            <tag> eshop </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Centos 安装</title>
      <link href="/2018/04/05/Centos/"/>
      <url>/2018/04/05/Centos/</url>
      <content type="html"><![CDATA[<h1 id="Install-Centos-6-9"><a href="#Install-Centos-6-9" class="headerlink" title="Install Centos 6.9"></a>Install Centos 6.9</h1><h1 id="配置网络"><a href="#配置网络" class="headerlink" title="配置网络"></a>配置网络</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/sysconfig/network-scripts/ifcfg-eth0</span><br><span class="line"></span><br><span class="line">DEVICE=eth0</span><br><span class="line">TYPE=Ethernet</span><br><span class="line">ONBOOT=yes</span><br><span class="line">BOOTPROTO=dhcp</span><br><span class="line">service network restart</span><br><span class="line">ifconfig</span><br></pre></td></tr></table></figure><p>设置静态IP<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">BOOTPROTO=static</span><br><span class="line">IPADDR=192.168.0.150</span><br><span class="line">NETMASK=255.255.255.0</span><br><span class="line">GATEWAY=192.168.0.1</span><br><span class="line">service network restart</span><br></pre></td></tr></table></figure></p><h1 id="配置hosts"><a href="#配置hosts" class="headerlink" title="配置hosts"></a>配置hosts</h1><p>vi /etc/hosts</p><p>192.168.0.150 eshop-cache01</p><h1 id="安装SSH-服务"><a href="#安装SSH-服务" class="headerlink" title="安装SSH 服务"></a>安装SSH 服务</h1><p>yum install openssh-server</p><p>service sshd restart</p><p>netstat -antp | grep sshd  //查看是否开启22端口</p><p>chkconfig sshd on</p><h1 id="关闭防火墙"><a href="#关闭防火墙" class="headerlink" title="关闭防火墙"></a>关闭防火墙</h1><p>service iptables stop<br>service ip6tables stop<br>chkconfig iptables off<br>chkconfig ip6tables off</p><p>vi /etc/selinux/config<br>SELINUX=disabled</p><h1 id="通过SSH-链接远程的服务器"><a href="#通过SSH-链接远程的服务器" class="headerlink" title="通过SSH 链接远程的服务器"></a>通过SSH 链接远程的服务器</h1><p>ssh <a href="mailto:root@192.168.0.150" target="_blank" rel="noopener">root@192.168.0.150</a></p>]]></content>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>HashMap 原理</title>
      <link href="/2018/04/05/HashMap/"/>
      <url>/2018/04/05/HashMap/</url>
      <content type="html"><![CDATA[<p><img src="/2018/04/05/HashMap/Map-interface.png" alt="logo"></p><p>Map，TreeMap是基于树的实现，HashMap，HashTable，ConcurrentHashMap是基于hash表的实现,下文我们会介绍hash表。HashTable和HashMap在代码实现上，基本上是一样的，和Vector与Arraylist的区别大体上差不多，一个是线程安全的，一个非线程安全.ConcurrentHashMap也是线程安全的，但性能比HashTable好很多，HashTable是锁整个Map对象，而ConcurrentHashMap是锁Map的部分结构，LinkedHashMap后续会单独开文讲解。</p><p>ConcurrentHashMap是线程安全的，HashMap内部维护着一个Entry数组，而ConcurrentHashMap内部有一个Segment段，它将大的HashMap切分成若干个段（小的HashMap），然后让数据在每一段上Hash，这样多个线程在不同段上的Hash操作一定是线程安全的，所以只需要同步同一个段上的线程就可以了，这样实现了锁的分离，大大增加了并发量。ConcurrentHashMap的实现中还使用了不变模式final和volatile来保障线程安全</p><p><img src="/2018/04/05/HashMap/Key-value.png" alt="logo"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">package com.validate;</span><br><span class="line"></span><br><span class="line">import java.util.HashMap;</span><br><span class="line">import java.util.Map;</span><br><span class="line"></span><br><span class="line">public class HashMapTest &#123;</span><br><span class="line"></span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">Map&lt;String,Person&gt; personMap = new HashMap&lt;&gt;();</span><br><span class="line">personMap.put(&quot;张三&quot;, new Person(&quot;张三&quot;,21));</span><br><span class="line">personMap.put(&quot;李四&quot;, new Person(&quot;李四&quot;,21));</span><br><span class="line">personMap.put(&quot;王五&quot;, new Person(&quot;王五&quot;,21));</span><br><span class="line">personMap.put(&quot;赵六️&quot;, new Person(&quot;赵六&quot;,21));</span><br><span class="line">personMap.put(&quot;孙七&quot;, new Person(&quot;孙七&quot;,21));</span><br><span class="line">personMap.put(&quot;周八&quot;, new Person(&quot;周八&quot;,21));</span><br><span class="line">personMap.put(&quot;钱九&quot;, new Person(&quot;钱九&quot;,21));</span><br><span class="line">personMap.put(&quot;吴十&quot;, new Person(&quot;吴十&quot;,21));</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>初始化HashMap，成员变量table数组默认为null，size默认为0，负载因子为0.75f， 内存分析图</p><p><img src="/2018/04/05/HashMap/Init-map.png" alt="logo"></p><p>当我们放入第一个元素时，如果底层数组还是null，系统会初始化一个长度为16的Node数组，像极了ArrayList的初始化,最后返回new出来的数组，继续画图，由于篇幅有限，下图中省略了部分数组内容，注意，虽然数组长度为16，但逻辑长度size依然是0</p><p><img src="/2018/04/05/HashMap/Init-node.png" alt="logo"></p><p>当我们执行put方法的时候，计算合法数组下标,源码如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">i = (n - 1) &amp; hash;//hash是传过来的，其中n是底层数组的长度，用&amp;运算符计算出i的值 </span><br><span class="line">p = tab[i];//用计算出来的i的值作为下标从数组中元素</span><br><span class="line">if(p == null)&#123;//如果这个元素为null，用key,value构造一个Node对象放入数组下标为i的位置</span><br><span class="line">     tab[i] = newNode(hash, key, value, null);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个hash值是字符串“张三”这个对象的hashCode方法与hashMap提供hash()方法共同计算出来的结果，其中n是数组的长度，目前数组长度为16，不管这个hash的值是多少，经过(n - 1) &amp; hash计算出来的i 的值一定在n-1之间。刚好是底层数组的合法下标，用i这个下标值去底层数组里去取值，如果为null，创建一个Node放到数组下标为i的位置。这里的“张三”计算出来的i的值为2，继续画图</p><p><img src="/2018/04/05/HashMap/Put-value.png" alt="logo"></p><p>继续添加元素“李四”，“王五”，“赵六”，一切正常，key：“李四”经过(n - 1) &amp; hash算出来在数组下标位置为1，“王五”为7，“赵六”为9，添加完成后如下图<br><img src="/2018/04/05/HashMap/Put-value2.png" alt="logo"></p><p>上图更趋近于堆内存中的样子，但看起来比较复杂，我们简化一下<br><img src="/2018/04/05/HashMap/Simple.png" alt="logo"><br>上图是简化后的堆内存图。继续往里添加“孙七”，通过(n - 1) &amp; hash计算“孙七”这个key时计算出来的下标值是1，而数组下标1这个位置目前已经被“李四”给占了，产生了冲突。相信大家在看本文的过程中也有这样的疑惑，万一计算出来的下标值i重了怎么办？我们来看一看HashMap是怎么解决冲突的。</p><p>源码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">p.next = newNode(hash, key, value, null);</span><br></pre></td></tr></table></figure><p>也就是说new一个新的Node对象并把当前Node的next引用指向该对象，也就是说原来该位置上只有一个元素对象，现在转成了单向链表，继续画图</p><p><img src="/2018/04/05/HashMap/Put-value3.png" alt="logo"></p><p>继续添加其它元素，添加完成后如下<br><img src="/2018/04/05/HashMap/Put-value4.png" alt="logo"></p><p>当链表长度到8时，将链表转化为红黑树来处理，由于树相关的内容本专栏还未讲解，红黑树的内容这里就不深入了。树在内存中的样子我们还是画个图简单的了解一下</p><p><img src="/2018/04/05/HashMap/Red-Black-Tree.png" alt="logo"></p><p>在JDK1.7及以前的版本中，HashMap里是没有红黑树的实现的，在JDK1.8中加入了红黑树是为了防止哈希表碰撞攻击，当链表链长度为8时，及时转成红黑树，提高map的效率。</p><p> 总结：</p><p>1、计算key的hash值，算出元素在底层数组中的下标位置。</p><p>2、通过下标位置定位到底层数组里的元素（也有可能是链表也有可能是树）。</p><p>3、取到元素，判断放入元素的key是否==或equals当前位置的key，成立则替换value值，返回旧值。</p><p>4、如果是树，循环树中的节点，判断放入元素的key是否==或equals节点的key，成立则替换树里的value，并返回旧值，不成立就添加到树里。</p><p>5、否则就顺着元素的链表结构循环节点，判断放入元素的key是否==或equals节点的key，成立则替换链表里value，并返回旧值，找不到就添加到链表的最后。</p><p>精简一下，判断放入HashMap中的元素要不要替换当前节点的元素，key满足以下两个条件即可替换：</p><p>1、hash值相等。</p><p>2、==或equals的结果为true。</p><p>由于hash算法依赖于对象本身的hashCode方法，所以对于HashMap里的元素来说，hashCode方法与equals方法非常的重要，这也是在说说Java里的equals（中）一文中强调重写对象的equals方法一定要重写hashCode方法的原因，不重写的话，放到HashMap中可能会得不到你想要的结果！本示例中放入的key是String类型的，String这个类已经重写了hashCode方法，有兴趣的朋友可以自行查看源码。</p>]]></content>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Hexo</title>
      <link href="/2018/02/28/Hexo/"/>
      <url>/2018/02/28/Hexo/</url>
      <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p><h3 id="Issues"><a href="#Issues" class="headerlink" title="Issues"></a>Issues</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">* npm install hexo-generator-archive --save</span><br><span class="line">* npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>]]></content>
      
      
    </entry>
    
  
  
    
    <entry>
      <title></title>
      <link href="/404.html"/>
      <url>/404.html</url>
      <content type="html"><![CDATA[<html>    <head>         <meta charset="UTF-8">         <title>404</title>                                                                                                                                            </head>    <body>         <script type="text/javascript" src="http://www.qq.com/404/search_children.js" charset="utf-8"></script>    </body></html>]]></content>
    </entry>
    
    <entry>
      <title>categories</title>
      <link href="/categories/index.html"/>
      <url>/categories/index.html</url>
      <content type="html"><![CDATA[]]></content>
    </entry>
    
    <entry>
      <title>schedule</title>
      <link href="/schedule/index.html"/>
      <url>/schedule/index.html</url>
      <content type="html"><![CDATA[]]></content>
    </entry>
    
    <entry>
      <title>tags</title>
      <link href="/tags/index.html"/>
      <url>/tags/index.html</url>
      <content type="html"><![CDATA[]]></content>
    </entry>
    
  
</search>
